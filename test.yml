---
- name: Aplicar instalaciÃ³n de software
  hosts: rocky
  become: yes
  tasks:
    - name: Enable EPEL repository
      command: dnf install -y epel-release
      when: ansible_os_family == "RedHat"
  roles:
    - role: warewulf
  vars:
    make_hosts: true
    monitoring_warewulf: false
    install_dnf: false
    dnf_packages: "{{ basic_packages }}"
    services:
      - name: lldpd
        enabled: true

- name: Configurar sistema
  hosts: rocky
  become: yes
  vars:
    make_hosts: true
  tasks:
    - name: Enable powertools repository
      command: dnf config-manager --set-enabled powertools
      when: ansible_os_family == "RedHat"

    - name: Install EPEL release
      command: dnf install -y epel-release
      when: ansible_os_family == "RedHat"

    - name: Enable and start lldpd service
      systemd:
        name: lldpd
        enabled: yes
        state: started
      when: ansible_os_family == "RedHat"

    - name: Stop and disable firewalld-libvirtd-nftables services
      systemd:
        name: "{{ item }}"
        state: stopped
        enabled: no
      loop:
        - firewalld
        - libvirtd
        - nftables
      ignore_errors: yes

    - name: Flush all iptables rules
      command: iptables -F

    - name: Flush all iptables NAT rules
      command: iptables -t nat -F

    - name: Enable IP forwarding
      sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        state: present
        reload: yes

    - name: Ensure IP forwarding is persistent
      lineinfile:
        path: /etc/sysctl.conf
        regexp: '^net.ipv4.ip_forward'
        line: 'net.ipv4.ip_forward = 1'
        state: present

    - name: Apply masquerade rule to iptables
      iptables:
        table: nat
        chain: POSTROUTING
        out_interface: enp0s3
        jump: MASQUERADE

    - name: Enable and start iptables service
      systemd:
        name: iptables
        enabled: yes
        state: started
      when: ansible_os_family == "RedHat"

    - name: Move existing iptables configuration file
      command: mv /etc/sysconfig/iptables /etc/sysconfig/iptables.old
      ignore_errors: yes

    - name: Save current iptables rules
      command: service iptables save
      ignore_errors: yes

    - name: Configure Clustershell groups
      template:
        src: ./roles/warewulf/confFiles/local.cfg.j2
        dest: /etc/clustershell/groups.d/local.cfg
        owner: root
        group: root
        mode: '0644'
      when: ansible_os_family == "RedHat"

    - name: Set timezone to Europe/Madrid
      command: timedatectl set-timezone Europe/Madrid

    - name: Apply chrony configuration template
      template:
        src: ./roles/warewulf/confFiles/chrony.conf.j2
        dest: /etc/chrony.conf
        owner: root
        group: root
        mode: '0644'

    - name: Enable and start chronyd service
      systemd:
        name: chronyd
        enabled: yes
        state: restarted

    - name: Disable SELinux
      command: sed -i 's/\(^SELINUX=\).*/\1disabled/g' /etc/selinux/config

    - name: Create directory for OS updates
      file:
        path: /install/osupdates/rocky8/x86_64/
        state: directory
        mode: '0755'

    - name: Sync repositories
      vars:
        sync: true
      block:
        - name: Sync AppStream repository
          command: dnf reposync -n --repoid=appstream --download-path=/install/osupdates/rocky8/x86_64 --downloadcomps --download-metadata --gpgcheck

        - name: Sync BaseOS repository
          command: dnf reposync -n --repoid=baseos --download-path=/install/osupdates/rocky8/x86_64 --downloadcomps --download-metadata --gpgcheck

        - name: Sync EPEL repository
          command: dnf reposync -n --repoid=epel --download-path=/install/osupdates/rocky8/x86_64 --downloadcomps --download-metadata --gpgcheck

        - name: Sync EPEL Modular repository
          command: dnf reposync -n --repoid=epel-modular --download-path=/install/osupdates/rocky8/x86_64 --downloadcomps --download-metadata --gpgcheck

        - name: Sync Extras repository
          command: dnf reposync -n --repoid=extras --download-path=/install/osupdates/rocky8/x86_64 --downloadcomps --download-metadata --gpgcheck

        - name: Sync HA repository
          command: dnf reposync -n --repoid=ha --download-path=/install/osupdates/rocky8/x86_64 --downloadcomps --download-metadata --gpgcheck

        - name: Enable PowerTools repository
          command: dnf config-manager --set-enabled powertools
          when: ansible_os_family == "RedHat"

        - name: Sync PowerTools repository
          command: dnf reposync -n --repoid=powertools --download-path=/install/osupdates/rocky8/x86_64 --downloadcomps --download-metadata --gpgcheck -v
          when: ansible_os_family == "RedHat"

        - name: Check if highavailability directory exists
          stat:
            path: /install/osupdates/rocky8/x86_64/highavailability
          register: highavailability_dir

        - name: Remove existing highavailability directory
          command: rm -rf /install/osupdates/rocky8/x86_64/highavailability
          when: highavailability_dir.stat.exists

        - name: Rename HA directory to highavailability
          command: mv /install/osupdates/rocky8/x86_64/ha /install/osupdates/rocky8/x86_64/highavailability
          when: highavailability_dir.stat.exists == false
      when: sync == false

    - name: Check if userdir.conf exists
      stat:
        path: /etc/httpd/conf.d/userdir.conf
      register: userdir_conf

    - name: Disable user directories web configuration
      command: mv /etc/httpd/conf.d/userdir.conf /etc/httpd/conf.d/userdir.conf.disabled
      when: userdir_conf.stat.exists
      ignore_errors: yes

    - name: Check if welcome.conf exists
      stat:
        path: /etc/httpd/conf.d/welcome.conf
      register: welcome_conf

    - name: Disable welcome page configuration
      command: mv /etc/httpd/conf.d/welcome.conf /etc/httpd/conf.d/welcome.conf.disabled
      when: welcome_conf.stat.exists
      ignore_errors: yes

    - name: Configurar VirtualHost por defecto
      vars:
        server_name: "192.168.1.1"
        server_alias: "headnode.hpc.domain"
      block:
        - name: Aplicar plantilla de VirtualHost
          template:
            src: roles/warewulf/confFiles/000-default.conf.j2
            dest: /etc/httpd/conf.d/000-default.conf
            owner: root
            group: root
            mode: '0644'

- name: Manage YUM repository files
  hosts: rocky
  become: yes
  tasks:
    - name: Create directory for online repos
      file:
        path: /etc/yum.repos.d/online-repos
        state: directory
        mode: '0755'

    - name: Check if any .repo files exist
      find:
        paths: /etc/yum.repos.d/
        patterns: '*.repo'
      register: repo_files

    - name: Copy .repo files to online-repos directory
      copy:
        src: "{{ item.path }}"
        dest: /etc/yum.repos.d/online-repos/
        mode: '0644'
      loop: "{{ repo_files.files }}"
      when: repo_files.matched > 0
      ignore_errors: yes

- name: Manage YUM local repository
  hosts: rocky
  become: yes
  tasks:
    - name: Set REPOSIP variable
      set_fact:
        repos_ip: "192.168.1.1"  # Use the head node internal network IP address

    - name: Remove unnecessary repo files
      file:
        path: "/etc/yum.repos.d/{{ item }}"
        state: absent
      loop:
        - epel-testing*.repo
        - Rocky-Debuginfo.repo
        - Rocky-Devel.repo
        - Rocky-Media.repo
        - Rocky-NFV.repo
        - Rocky-Plus.repo
        - Rocky-ResilientStorage.repo
        - Rocky-RT.repo
        - Rocky-Sources.repo

    - name: Rename repo files
      shell: |
        for i in $(ls /etc/yum.repos.d/*.repo); do
          base=$(basename $i .repo)
          mv /etc/yum.repos.d/$base.repo /etc/yum.repos.d/$base-local.repo
        done
      args:
        executable: /bin/bash

    - name: Update repo file names
      shell: |
        for file in /etc/yum.repos.d/*.repo; do
          [ -e "$file" ] && sed -i 's/\]/-local\]/' "$file"
        done
      args:
        executable: /bin/bash

    - name: Update repo file descriptions
      shell: |
        for file in /etc/yum.repos.d/*.repo; do
          [ -e "$file" ] && sed -i '/name/s/$/ - Local/' "$file"
        done
      args:
        executable: /bin/bash

    - name: Comment out mirrorlist and metalink in Rocky repos
      shell: |
        for file in /etc/yum.repos.d/Rocky*.repo; do
          [ -e "$file" ] && sed -i '/mirrorlist=/s/^/#/' "$file"
        done
      args:
        executable: /bin/bash

    - name: Comment out metalink in EPEL repos
      shell: |
        for file in /etc/yum.repos.d/epel*.repo; do
          [ -e "$file" ] && sed -i '/metalink=/s/^/#/' "$file"
        done
      args:
        executable: /bin/bash

    - name: Backup and restore EPEL GPG key
      block:
        - name: Backup EPEL GPG key
          copy:
            src: /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-8
            dest: /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-8.bak

        - name: Remove EPEL release
          command: dnf remove -y epel-release

        - name: Restore EPEL GPG key
          copy:
            src: /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-8.bak
            dest: /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-8
            remote_src: yes

    - name: Update baseurl in EPEL repo files
      shell: |
        [ -e /etc/yum.repos.d/epel-local.repo ] && sed -i "s/#baseurl=.*$basearch$/baseurl=http:\/\/{{ repos_ip }}\/install\/osupdates\/rocky8\/x86_64\/epel/" /etc/yum.repos.d/epel-local.repo
      args:
        executable: /bin/bash

    - name: Update baseurl in EPEL Modular repo files
      shell: |
        [ -e /etc/yum.repos.d/epel-modular-local.repo ] && sed -i "s/#baseurl=.*$basearch$/baseurl=http:\/\/{{ repos_ip }}\/install\/osupdates\/rocky8\/x86_64\/epel-modular/" /etc/yum.repos.d/epel-modular-local.repo
      args:
        executable: /bin/bash

    - name: Update baseurl in Rocky repo files
      shell: |
        for i in $(ls /etc/yum.repos.d/Rocky*.repo); do
          [ -e "$i" ] && sed -i "s/#baseurl.*/baseurl=http:\/\/{{ repos_ip }}\/install\/osupdates\/rocky8\/x86_64\/$(echo $i | awk -F'-' '{print tolower (\$2)}')/" $i
        done
      args:
        executable: /bin/bashaseurl.*/baseurl=http:\/\/{{ repos_ip }}\/install\/osupdates\/rocky8\/x86_64\/$(echo $i | awk -F"-" "{print tolower (\$2)}")/" $i; done'